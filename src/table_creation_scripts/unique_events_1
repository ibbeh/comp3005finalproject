import os
import json
import psycopg2

# Database connection parameters
db_params = {
    'dbname': 'FUTDB',
    'user': 'postgres',
    'password': 'Kuwait$22',
    'host': 'localhost'
}

# Connect to your PostgreSQL database
conn = psycopg2.connect(**db_params)
cursor = conn.cursor()

# Path to your events subfolder
events_path = 'C:/codeYearTwo/3005_final/data/events'

# Load all events and map them by ID for quick access
events_by_id = {}
for filename in os.listdir(events_path):
    if filename.endswith('.json'):
        file_path = os.path.join(events_path, filename)
        with open(file_path, 'r', encoding='utf-8') as file:
            events = json.load(file)
            for event in events:
                events_by_id[event['id']] = event

# Process each event for the database
for event in events_by_id.values():
    event_id = event['id']
    event_type = event.get('type', {}).get('name')

    # Handle substitutions
    if event_type == 'Substitution':
        player_out_id = event['player']['id']
        player_in_id = event.get('substitution', {}).get('replacement', {}).get('id')
        reason = event.get('substitution', {}).get('reason', 'Unknown')
        cursor.execute("INSERT INTO Substitutions (event_id, player_out_id, player_in_id, reason) VALUES (%s, %s, %s, %s) ON CONFLICT (event_id) DO NOTHING;", (event_id, player_out_id, player_in_id, reason))

    # Handle shots
    elif event_type == 'Shot':
        outcome = 'Goal' if 'Goal' in [events_by_id.get(rel_event, {}).get('type', {}).get('name') for rel_event in event.get('related_events', [])] else 'No Goal'
        first_time = event.get('shot', {}).get('first_time', False)
        shot_type = event.get('shot', {}).get('type', {}).get('name', 'Unknown')
        body_part = event.get('shot', {}).get('body_part', {}).get('name', 'Unknown')
        location_x, location_y = event.get('location', [None, None])
        cursor.execute("INSERT INTO Shots (event_id, outcome, first_time, shot_type, body_part, shot_location_x, shot_location_y) VALUES (%s, %s, %s, %s, %s, %s, %s) ON CONFLICT (event_id) DO NOTHING;", (event_id, outcome, first_time, shot_type, body_part, location_x, location_y))

    # Handle passes
    elif event_type == 'Pass':
        pass_details = event.get('pass', {})
        pass_type = pass_details.get('type', {}).get('name', 'Unknown')
        pass_technique = pass_details.get('technique', {}).get('name', 'Unknown')
        successful = pass_details.get('outcome', {}).get('name') == 'Complete'
        length = pass_details.get('length', 0)
        angle = pass_details.get('angle', 0)
        height = pass_details.get('height', {}).get('name', 'Unknown')
        end_location_x, end_location_y = pass_details.get('end_location', [None, None])
        recipient_id = pass_details.get('recipient', {}).get('id')
        body_part = pass_details.get('body_part', {}).get('name', 'Unknown')
        cursor.execute("INSERT INTO Passes (event_id, pass_type, pass_technique, successful, length, angle, height, end_location_x, end_location_y, recipient_id, body_part) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) ON CONFLICT (event_id) DO NOTHING;", (event_id, pass_type, pass_technique, successful, length, angle, height, end_location_x, end_location_y, recipient_id, body_part))

# Commit the transactions
conn.commit()

# Close the cursor and connection
cursor.close()
conn.close()

print("Data successfully initialized from JSON events into the database.")
